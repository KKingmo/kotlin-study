/**
 * 람다
 */
package fastcampus.part0.kotlin

fun main() {
    /**
     * 람다 표현식은 익명 함수를 생성하는 간결한 방법입니다.
     * 람다는 변수처럼 취급될 수 있으며, 함수의 인자로 전달하거나 결과로 반환할 수 있습니다.
     * 일반적으로 한 번만 사용되고 재사용되지 않는 함수를 정의할 때 사용됩니다.
     */
    val a = fun() { println("hello") }
    val c: Int = 10

    /**
     * 단일 인자를 받는 람다 표현식의 예입니다.
     * 단일 인자의 람다에서는 인자를 'it'으로 참조할 수 있습니다.
     * 이 람다는 입력된 정수를 10으로 곱한 결과를 반환합니다.
     */
    val b: (Int) -> Int = { it * 10 }

    /**
     * 두 개의 인자를 받는 람다 표현식의 예입니다.
     * 이 람다는 두 개의 입력된 정수를 곱한 결과를 반환합니다.
     */
    val d = { i: Int, j: Int -> i * j }

    /**
     * 여러 개의 인자를 받고, 일부 인자를 무시하는 람다 표현식의 예입니다.
     * '_'를 사용하여 람다의 일부 인자를 무시할 수 있습니다.
     * 이 람다는 두 번째 문자열 인자를 그대로 반환합니다.
     */
    val f: (Int, String, Boolean) -> String = { _, b, _ -> b }

    hello(10, b)

    /**
     * 람다 표현식 자체를 출력하면, 람다 코드 조각이 출력됩니다.
     */
    println(b)

    /**
     * 람다 표현식을 실행하려면, 함수 호출과 같이 '()'를 사용하여 호출해야 합니다.
     * 이 예에서는 10을 인자로 전달하여 람다를 호출합니다.
     */
    println(b(10))
}

/**
 * 람다 표현식을 인자로 받고 반환하는 함수의 예입니다.
 * 이 함수는 정수와 람다 표현식을 인자로 받아, 람다 표현식을 20을 인자로 하여 호출하고,
 * 람다 표현식 자체를 반환합니다.
 */
fun hello(a: Int, b: (Int) -> Int): (Int) -> Int {
    println(a)
    println(b(20))
    return b
}
