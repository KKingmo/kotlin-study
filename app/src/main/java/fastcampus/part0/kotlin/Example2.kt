/**
 * 함수
 */
package fastcampus.part0.kotlin

fun main() {
    val result1 = test1(1)
    val result2 = test2(1, c = 5)
    val result3 = test3(name = "오창모", nickname = "kingmo", id = "777")
    println(result1)
    println(result2)
    println(result3)
}

/**
 * 'b' 매개변수에 기본값(default value)을 할당하고 있습니다.
 * 기본값을 할당함으로써, 함수를 호출할 때 'b' 매개변수에 대한 인자를 생략할 수 있게 됩니다.
 * 이러한 방식은 함수 오버로딩을 사용하지 않고도, 다양한 방법으로 함수를 호출할 수 있게 해주어
 * 코드를 더 간결하고 유연하게 작성할 수 있게 도와줍니다.
 */
fun test1(a: Int, b: Int = 3): Int {
    println(a + b)
    return a + b
}

/**
 * 'b'와 'c' 매개변수에 기본값을 할당하고 있어, 함수 호출 시 일부 인자를 생략할 수 있습니다.
 * 예를 들어, `test2(1, c = 5)`와 같이 호출할 경우, 'b' 매개변수는 기본값 3을 사용하고, 'c' 매개변수는 명시적으로 제공된 값 5를 사용하게 됩니다.
 * 이러한 방식은 함수 호출 시 인자의 순서를 유연하게 조정할 수 있으며, 필요한 인자만 명시적으로 제공함으로써 코드의 가독성을 향상시킬 수 있습니다.
 */
fun test2(a: Int, b: Int = 3, c: Int = 4): Int {
    println(a + b)
    return a + b
}

/**
 * 이 함수는 이름(name), 별명(nickname), 아이디(id) 세 개의 문자열 인자를 받아,
 * 이들을 연결하여 콘솔에 출력하는 함수입니다.
 *
 * 여기서 특별히 주목해야 할 부분은 함수의 본문이 단일 표현식(single expression)으로 구성되어 있다는 점입니다.
 * 코틀린에서는 함수의 본문이 단일 표현식으로만 이루어진 경우, 함수 선언을 간략화할 수 있습니다.
 * 이를 "단일 표현식 함수(single expression function)"라고 하며,
 * 반환 타입과 본문을 등호(=)로 연결하여 간단하게 표현할 수 있습니다.
 * 이 방식은 코드를 더 간결하고 읽기 쉽게 만들어 줍니다.
 *
 * 또한, 함수 호출 시 인자를 명시적으로 지정함으로써, 인자의 순서를 신경 쓰지 않고
 * 함수를 호출할 수 있습니다. 이는 코드의 가독성을 향상시키고,
 * 인자의 이름을 통해 각 인자의 역할이 무엇인지 명확하게 알 수 있게 해줍니다.
 *
 * 코틀린에서는 모든 함수가 어떠한 형태의 값을 반환합니다. 여기서는 반환 값이 명시적으로 선언되어 있지 않지만,
 * 실제로는 'Unit'이라는 특별한 타입의 값을 반환하고 있습니다. 'Unit'은 코틀린에서 'void'와 유사한 역할을 하는 타입으로,
 * 함수가 특별한 반환 값 없이 종료될 때 사용됩니다.
 *
 * 'Unit' 반환 타입은 생략이 가능하며, 이 경우 함수 선언에서 반환 타입을 명시하지 않아도 됩니다.
 * 이러한 특성 덕분에, 우리는 코드를 더 간결하고 깔끔하게 작성할 수 있습니다.
 *
 * 아래의 'test3' 함수는 실제로 'Unit'을 반환하며, 이는 함수 선언에서 생략되어 있습니다.
 */
fun test3(name: String, nickname: String, id: String) = println(name + nickname + id)